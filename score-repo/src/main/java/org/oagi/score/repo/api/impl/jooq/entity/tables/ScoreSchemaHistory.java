/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ScoreSchemaHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScoreSchemaHistory extends TableImpl<ScoreSchemaHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.score_schema_history</code>
     */
    public static final ScoreSchemaHistory SCORE_SCHEMA_HISTORY = new ScoreSchemaHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScoreSchemaHistoryRecord> getRecordType() {
        return ScoreSchemaHistoryRecord.class;
    }

    /**
     * The column <code>oagi.score_schema_history.history_id</code>. An
     * internal, primary database key.
     */
    public final TableField<ScoreSchemaHistoryRecord, String> HISTORY_ID = createField(DSL.name("history_id"), SQLDataType.CHAR(36).nullable(false), this, "An internal, primary database key.");

    /**
     * The column <code>oagi.score_schema_history.order</code>.
     */
    public final TableField<ScoreSchemaHistoryRecord, UInteger> ORDER = createField(DSL.name("order"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.score_schema_history.executed_on</code>.
     */
    public final TableField<ScoreSchemaHistoryRecord, LocalDateTime> EXECUTED_ON = createField(DSL.name("executed_on"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>oagi.score_schema_history.result</code>.
     */
    public final TableField<ScoreSchemaHistoryRecord, Short> RESULT = createField(DSL.name("result"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("-1", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>oagi.score_schema_history.message</code>.
     */
    public final TableField<ScoreSchemaHistoryRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    private ScoreSchemaHistory(Name alias, Table<ScoreSchemaHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScoreSchemaHistory(Name alias, Table<ScoreSchemaHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.score_schema_history</code> table reference
     */
    public ScoreSchemaHistory(String alias) {
        this(DSL.name(alias), SCORE_SCHEMA_HISTORY);
    }

    /**
     * Create an aliased <code>oagi.score_schema_history</code> table reference
     */
    public ScoreSchemaHistory(Name alias) {
        this(alias, SCORE_SCHEMA_HISTORY);
    }

    /**
     * Create a <code>oagi.score_schema_history</code> table reference
     */
    public ScoreSchemaHistory() {
        this(DSL.name("score_schema_history"), null);
    }

    public <O extends Record> ScoreSchemaHistory(Table<O> child, ForeignKey<O, ScoreSchemaHistoryRecord> key) {
        super(child, key, SCORE_SCHEMA_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public UniqueKey<ScoreSchemaHistoryRecord> getPrimaryKey() {
        return Keys.KEY_SCORE_SCHEMA_HISTORY_PRIMARY;
    }

    @Override
    public ScoreSchemaHistory as(String alias) {
        return new ScoreSchemaHistory(DSL.name(alias), this);
    }

    @Override
    public ScoreSchemaHistory as(Name alias) {
        return new ScoreSchemaHistory(alias, this);
    }

    @Override
    public ScoreSchemaHistory as(Table<?> alias) {
        return new ScoreSchemaHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScoreSchemaHistory rename(String name) {
        return new ScoreSchemaHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScoreSchemaHistory rename(Name name) {
        return new ScoreSchemaHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScoreSchemaHistory rename(Table<?> name) {
        return new ScoreSchemaHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, UInteger, LocalDateTime, Short, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super UInteger, ? super LocalDateTime, ? super Short, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super UInteger, ? super LocalDateTime, ? super Short, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
