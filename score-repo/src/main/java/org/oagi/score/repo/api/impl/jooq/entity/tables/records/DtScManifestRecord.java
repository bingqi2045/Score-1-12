/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtScManifest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtScManifestRecord extends UpdatableRecordImpl<DtScManifestRecord> implements Record9<ULong, ULong, ULong, ULong, Byte, ULong, ULong, Byte, ULong> {

    private static final long serialVersionUID = -563397586;

    /**
     * Setter for <code>oagi.dt_sc_manifest.dt_sc_manifest_id</code>.
     */
    public void setDtScManifestId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.dt_sc_manifest_id</code>.
     */
    public ULong getDtScManifestId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.release_id</code>.
     */
    public void setReleaseId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.release_id</code>.
     */
    public ULong getReleaseId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.dt_sc_id</code>.
     */
    public void setDtScId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.dt_sc_id</code>.
     */
    public ULong getDtScId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.owner_dt_manifest_id</code>.
     */
    public void setOwnerDtManifestId(ULong value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.owner_dt_manifest_id</code>.
     */
    public ULong getOwnerDtManifestId() {
        return (ULong) get(3);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.conflict</code>. This indicates that there is a conflict between self and relationship.
     */
    public void setConflict(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.conflict</code>. This indicates that there is a conflict between self and relationship.
     */
    public Byte getConflict() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.prev_dt_sc_manifest_id</code>.
     */
    public void setPrevDtScManifestId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.prev_dt_sc_manifest_id</code>.
     */
    public ULong getPrevDtScManifestId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.next_dt_sc_manifest_id</code>.
     */
    public void setNextDtScManifestId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.next_dt_sc_manifest_id</code>.
     */
    public ULong getNextDtScManifestId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.revision_id</code>. Indicates whether this is deprecated and should not be reused (i.e., no new reference to this record should be created).
     */
    public void setRevisionId(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.revision_id</code>. Indicates whether this is deprecated and should not be reused (i.e., no new reference to this record should be created).
     */
    public Byte getRevisionId() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>oagi.dt_sc_manifest.replaced_manifest_by</code>. This alternative refers to a replacement manifest if the record is deprecated.
     */
    public void setReplacedManifestBy(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.dt_sc_manifest.replaced_manifest_by</code>. This alternative refers to a replacement manifest if the record is deprecated.
     */
    public ULong getReplacedManifestBy() {
        return (ULong) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, ULong, ULong, Byte, ULong, ULong, Byte, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<ULong, ULong, ULong, ULong, Byte, ULong, ULong, Byte, ULong> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return DtScManifest.DT_SC_MANIFEST.DT_SC_MANIFEST_ID;
    }

    @Override
    public Field<ULong> field2() {
        return DtScManifest.DT_SC_MANIFEST.RELEASE_ID;
    }

    @Override
    public Field<ULong> field3() {
        return DtScManifest.DT_SC_MANIFEST.DT_SC_ID;
    }

    @Override
    public Field<ULong> field4() {
        return DtScManifest.DT_SC_MANIFEST.OWNER_DT_MANIFEST_ID;
    }

    @Override
    public Field<Byte> field5() {
        return DtScManifest.DT_SC_MANIFEST.CONFLICT;
    }

    @Override
    public Field<ULong> field6() {
        return DtScManifest.DT_SC_MANIFEST.PREV_DT_SC_MANIFEST_ID;
    }

    @Override
    public Field<ULong> field7() {
        return DtScManifest.DT_SC_MANIFEST.NEXT_DT_SC_MANIFEST_ID;
    }

    @Override
    public Field<Byte> field8() {
        return DtScManifest.DT_SC_MANIFEST.REVISION_ID;
    }

    @Override
    public Field<ULong> field9() {
        return DtScManifest.DT_SC_MANIFEST.REPLACED_MANIFEST_BY;
    }

    @Override
    public ULong component1() {
        return getDtScManifestId();
    }

    @Override
    public ULong component2() {
        return getReleaseId();
    }

    @Override
    public ULong component3() {
        return getDtScId();
    }

    @Override
    public ULong component4() {
        return getOwnerDtManifestId();
    }

    @Override
    public Byte component5() {
        return getConflict();
    }

    @Override
    public ULong component6() {
        return getPrevDtScManifestId();
    }

    @Override
    public ULong component7() {
        return getNextDtScManifestId();
    }

    @Override
    public Byte component8() {
        return getRevisionId();
    }

    @Override
    public ULong component9() {
        return getReplacedManifestBy();
    }

    @Override
    public ULong value1() {
        return getDtScManifestId();
    }

    @Override
    public ULong value2() {
        return getReleaseId();
    }

    @Override
    public ULong value3() {
        return getDtScId();
    }

    @Override
    public ULong value4() {
        return getOwnerDtManifestId();
    }

    @Override
    public Byte value5() {
        return getConflict();
    }

    @Override
    public ULong value6() {
        return getPrevDtScManifestId();
    }

    @Override
    public ULong value7() {
        return getNextDtScManifestId();
    }

    @Override
    public Byte value8() {
        return getRevisionId();
    }

    @Override
    public ULong value9() {
        return getReplacedManifestBy();
    }

    @Override
    public DtScManifestRecord value1(ULong value) {
        setDtScManifestId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value2(ULong value) {
        setReleaseId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value3(ULong value) {
        setDtScId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value4(ULong value) {
        setOwnerDtManifestId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value5(Byte value) {
        setConflict(value);
        return this;
    }

    @Override
    public DtScManifestRecord value6(ULong value) {
        setPrevDtScManifestId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value7(ULong value) {
        setNextDtScManifestId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value8(Byte value) {
        setRevisionId(value);
        return this;
    }

    @Override
    public DtScManifestRecord value9(ULong value) {
        setReplacedManifestBy(value);
        return this;
    }

    @Override
    public DtScManifestRecord values(ULong value1, ULong value2, ULong value3, ULong value4, Byte value5, ULong value6, ULong value7, Byte value8, ULong value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DtScManifestRecord
     */
    public DtScManifestRecord() {
        super(DtScManifest.DT_SC_MANIFEST);
    }

    /**
     * Create a detached, initialised DtScManifestRecord
     */
    public DtScManifestRecord(ULong dtScManifestId, ULong releaseId, ULong dtScId, ULong ownerDtManifestId, Byte conflict, ULong prevDtScManifestId, ULong nextDtScManifestId, Byte revisionId, ULong replacedManifestBy) {
        super(DtScManifest.DT_SC_MANIFEST);

        set(0, dtScManifestId);
        set(1, releaseId);
        set(2, dtScId);
        set(3, ownerDtManifestId);
        set(4, conflict);
        set(5, prevDtScManifestId);
        set(6, nextDtScManifestId);
        set(7, revisionId);
        set(8, replacedManifestBy);
    }
}
