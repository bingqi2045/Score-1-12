/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BlobContent;


/**
 * This table stores schemas whose content is only imported as a whole and is
 * represented in Blob.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlobContentRecord extends UpdatableRecordImpl<BlobContentRecord> implements Record2<String, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.blob_content.blob_content_id</code>. Primary,
     * internal database key.
     */
    public void setBlobContentId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.blob_content.blob_content_id</code>. Primary,
     * internal database key.
     */
    public String getBlobContentId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>oagi.blob_content.content</code>. The Blob content of
     * the schema file.
     */
    public void setContent(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.blob_content.content</code>. The Blob content of
     * the schema file.
     */
    public byte[] getContent() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return BlobContent.BLOB_CONTENT.BLOB_CONTENT_ID;
    }

    @Override
    public Field<byte[]> field2() {
        return BlobContent.BLOB_CONTENT.CONTENT;
    }

    @Override
    public String component1() {
        return getBlobContentId();
    }

    @Override
    public byte[] component2() {
        return getContent();
    }

    @Override
    public String value1() {
        return getBlobContentId();
    }

    @Override
    public byte[] value2() {
        return getContent();
    }

    @Override
    public BlobContentRecord value1(String value) {
        setBlobContentId(value);
        return this;
    }

    @Override
    public BlobContentRecord value2(byte[] value) {
        setContent(value);
        return this;
    }

    @Override
    public BlobContentRecord values(String value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlobContentRecord
     */
    public BlobContentRecord() {
        super(BlobContent.BLOB_CONTENT);
    }

    /**
     * Create a detached, initialised BlobContentRecord
     */
    public BlobContentRecord(String blobContentId, byte[] content) {
        super(BlobContent.BLOB_CONTENT);

        setBlobContentId(blobContentId);
        setContent(content);
    }
}
