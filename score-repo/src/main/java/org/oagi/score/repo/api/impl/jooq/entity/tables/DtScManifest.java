/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtScManifestRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtScManifest extends TableImpl<DtScManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.dt_sc_manifest</code>
     */
    public static final DtScManifest DT_SC_MANIFEST = new DtScManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtScManifestRecord> getRecordType() {
        return DtScManifestRecord.class;
    }

    /**
     * The column <code>oagi.dt_sc_manifest.dt_sc_manifest_id</code>. Primary,
     * internal database key.
     */
    public final TableField<DtScManifestRecord, String> DT_SC_MANIFEST_ID = createField(DSL.name("dt_sc_manifest_id"), SQLDataType.CHAR(36).nullable(false), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.dt_sc_manifest.release_id</code>. Foreign key to
     * the RELEASE table.
     */
    public final TableField<DtScManifestRecord, String> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.CHAR(36).nullable(false), this, "Foreign key to the RELEASE table.");

    /**
     * The column <code>oagi.dt_sc_manifest.dt_sc_id</code>.
     */
    public final TableField<DtScManifestRecord, String> DT_SC_ID = createField(DSL.name("dt_sc_id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.owner_dt_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, String> OWNER_DT_MANIFEST_ID = createField(DSL.name("owner_dt_manifest_id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.based_dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, String> BASED_DT_SC_MANIFEST_ID = createField(DSL.name("based_dt_sc_manifest_id"), SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public final TableField<DtScManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column
     * <code>oagi.dt_sc_manifest.replacement_dt_sc_manifest_id</code>. This
     * refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<DtScManifestRecord, String> REPLACEMENT_DT_SC_MANIFEST_ID = createField(DSL.name("replacement_dt_sc_manifest_id"), SQLDataType.CHAR(36), this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column <code>oagi.dt_sc_manifest.prev_dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, String> PREV_DT_SC_MANIFEST_ID = createField(DSL.name("prev_dt_sc_manifest_id"), SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.next_dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, String> NEXT_DT_SC_MANIFEST_ID = createField(DSL.name("next_dt_sc_manifest_id"), SQLDataType.CHAR(36), this, "");

    private DtScManifest(Name alias, Table<DtScManifestRecord> aliased) {
        this(alias, aliased, null);
    }

    private DtScManifest(Name alias, Table<DtScManifestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.dt_sc_manifest</code> table reference
     */
    public DtScManifest(String alias) {
        this(DSL.name(alias), DT_SC_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.dt_sc_manifest</code> table reference
     */
    public DtScManifest(Name alias) {
        this(alias, DT_SC_MANIFEST);
    }

    /**
     * Create a <code>oagi.dt_sc_manifest</code> table reference
     */
    public DtScManifest() {
        this(DSL.name("dt_sc_manifest"), null);
    }

    public <O extends Record> DtScManifest(Table<O> child, ForeignKey<O, DtScManifestRecord> key) {
        super(child, key, DT_SC_MANIFEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public UniqueKey<DtScManifestRecord> getPrimaryKey() {
        return Keys.KEY_DT_SC_MANIFEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<DtScManifestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DT_SC_MANIFEST_RELEASE_ID_FK, Keys.DT_SC_MANIFEST_DT_SC_ID_FK, Keys.DT_SC_MANIFEST_OWNER_DT_MANIFEST_ID_FK, Keys.DT_SC_MANIFEST_BASED_DT_SC_MANIFEST_ID_FK, Keys.DT_SC_MANIFEST_REPLACEMENT_DT_SC_MANIFEST_ID_FK, Keys.DT_SC_MANIFEST_PREV_DT_SC_MANIFEST_ID_FK, Keys.DT_SC_MANIFEST_NEXT_DT_SC_MANIFEST_ID_FK);
    }

    private transient Release _release;
    private transient DtSc _dtSc;
    private transient DtManifest _dtManifest;
    private transient DtScManifest _dtScManifestBasedDtScManifestIdFk;
    private transient DtScManifest _dtScManifestReplacementDtScManifestIdFk;
    private transient DtScManifest _dtScManifestPrevDtScManifestIdFk;
    private transient DtScManifest _dtScManifestNextDtScManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table.
     */
    public Release release() {
        if (_release == null)
            _release = new Release(this, Keys.DT_SC_MANIFEST_RELEASE_ID_FK);

        return _release;
    }

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table.
     */
    public DtSc dtSc() {
        if (_dtSc == null)
            _dtSc = new DtSc(this, Keys.DT_SC_MANIFEST_DT_SC_ID_FK);

        return _dtSc;
    }

    /**
     * Get the implicit join path to the <code>oagi.dt_manifest</code> table.
     */
    public DtManifest dtManifest() {
        if (_dtManifest == null)
            _dtManifest = new DtManifest(this, Keys.DT_SC_MANIFEST_OWNER_DT_MANIFEST_ID_FK);

        return _dtManifest;
    }

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_manifest_based_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifest dtScManifestBasedDtScManifestIdFk() {
        if (_dtScManifestBasedDtScManifestIdFk == null)
            _dtScManifestBasedDtScManifestIdFk = new DtScManifest(this, Keys.DT_SC_MANIFEST_BASED_DT_SC_MANIFEST_ID_FK);

        return _dtScManifestBasedDtScManifestIdFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_manifest_replacement_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifest dtScManifestReplacementDtScManifestIdFk() {
        if (_dtScManifestReplacementDtScManifestIdFk == null)
            _dtScManifestReplacementDtScManifestIdFk = new DtScManifest(this, Keys.DT_SC_MANIFEST_REPLACEMENT_DT_SC_MANIFEST_ID_FK);

        return _dtScManifestReplacementDtScManifestIdFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_manifest_prev_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifest dtScManifestPrevDtScManifestIdFk() {
        if (_dtScManifestPrevDtScManifestIdFk == null)
            _dtScManifestPrevDtScManifestIdFk = new DtScManifest(this, Keys.DT_SC_MANIFEST_PREV_DT_SC_MANIFEST_ID_FK);

        return _dtScManifestPrevDtScManifestIdFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_manifest_next_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifest dtScManifestNextDtScManifestIdFk() {
        if (_dtScManifestNextDtScManifestIdFk == null)
            _dtScManifestNextDtScManifestIdFk = new DtScManifest(this, Keys.DT_SC_MANIFEST_NEXT_DT_SC_MANIFEST_ID_FK);

        return _dtScManifestNextDtScManifestIdFk;
    }

    @Override
    public DtScManifest as(String alias) {
        return new DtScManifest(DSL.name(alias), this);
    }

    @Override
    public DtScManifest as(Name alias) {
        return new DtScManifest(alias, this);
    }

    @Override
    public DtScManifest as(Table<?> alias) {
        return new DtScManifest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtScManifest rename(String name) {
        return new DtScManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtScManifest rename(Name name) {
        return new DtScManifest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtScManifest rename(Table<?> name) {
        return new DtScManifest(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, Byte, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
