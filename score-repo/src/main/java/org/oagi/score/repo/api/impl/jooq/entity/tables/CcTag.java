/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CcTagRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CcTag extends TableImpl<CcTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.cc_tag</code>
     */
    public static final CcTag CC_TAG = new CcTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CcTagRecord> getRecordType() {
        return CcTagRecord.class;
    }

    /**
     * The column <code>oagi.cc_tag.cc_tag_id</code>. Primary, internal database
     * key.
     */
    public final TableField<CcTagRecord, String> CC_TAG_ID = createField(DSL.name("cc_tag_id"), SQLDataType.CHAR(36).nullable(false), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.cc_tag.tag_name</code>.
     */
    public final TableField<CcTagRecord, String> TAG_NAME = createField(DSL.name("tag_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private CcTag(Name alias, Table<CcTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private CcTag(Name alias, Table<CcTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.cc_tag</code> table reference
     */
    public CcTag(String alias) {
        this(DSL.name(alias), CC_TAG);
    }

    /**
     * Create an aliased <code>oagi.cc_tag</code> table reference
     */
    public CcTag(Name alias) {
        this(alias, CC_TAG);
    }

    /**
     * Create a <code>oagi.cc_tag</code> table reference
     */
    public CcTag() {
        this(DSL.name("cc_tag"), null);
    }

    public <O extends Record> CcTag(Table<O> child, ForeignKey<O, CcTagRecord> key) {
        super(child, key, CC_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public UniqueKey<CcTagRecord> getPrimaryKey() {
        return Keys.KEY_CC_TAG_PRIMARY;
    }

    @Override
    public CcTag as(String alias) {
        return new CcTag(DSL.name(alias), this);
    }

    @Override
    public CcTag as(Name alias) {
        return new CcTag(alias, this);
    }

    @Override
    public CcTag as(Table<?> alias) {
        return new CcTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CcTag rename(String name) {
        return new CcTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CcTag rename(Name name) {
        return new CcTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CcTag rename(Table<?> name) {
        return new CcTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
