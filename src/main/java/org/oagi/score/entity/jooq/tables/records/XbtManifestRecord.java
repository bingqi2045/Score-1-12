/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.entity.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.entity.jooq.tables.XbtManifest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XbtManifestRecord extends UpdatableRecordImpl<XbtManifestRecord> implements Record8<ULong, ULong, ULong, ULong, Byte, ULong, ULong, ULong> {

    private static final long serialVersionUID = -544912612;

    /**
     * Setter for <code>oagi.xbt_manifest.xbt_manifest_id</code>.
     */
    public void setXbtManifestId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.xbt_manifest_id</code>.
     */
    public ULong getXbtManifestId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.release_id</code>.
     */
    public void setReleaseId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.release_id</code>.
     */
    public ULong getReleaseId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.module_id</code>.
     */
    public void setModuleId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.module_id</code>.
     */
    public ULong getModuleId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.xbt_id</code>.
     */
    public void setXbtId(ULong value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.xbt_id</code>.
     */
    public ULong getXbtId() {
        return (ULong) get(3);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.conflict</code>. This indicates that there is a conflict between self and relationship.
     */
    public void setConflict(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.conflict</code>. This indicates that there is a conflict between self and relationship.
     */
    public Byte getConflict() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.revision_id</code>. A foreign key pointed to revision for the current record.
     */
    public void setRevisionId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.revision_id</code>. A foreign key pointed to revision for the current record.
     */
    public ULong getRevisionId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.prev_xbt_manifest_id</code>.
     */
    public void setPrevXbtManifestId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.prev_xbt_manifest_id</code>.
     */
    public ULong getPrevXbtManifestId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.next_xbt_manifest_id</code>.
     */
    public void setNextXbtManifestId(ULong value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.next_xbt_manifest_id</code>.
     */
    public ULong getNextXbtManifestId() {
        return (ULong) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, ULong, ULong, ULong, Byte, ULong, ULong, ULong> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<ULong, ULong, ULong, ULong, Byte, ULong, ULong, ULong> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return XbtManifest.XBT_MANIFEST.XBT_MANIFEST_ID;
    }

    @Override
    public Field<ULong> field2() {
        return XbtManifest.XBT_MANIFEST.RELEASE_ID;
    }

    @Override
    public Field<ULong> field3() {
        return XbtManifest.XBT_MANIFEST.MODULE_ID;
    }

    @Override
    public Field<ULong> field4() {
        return XbtManifest.XBT_MANIFEST.XBT_ID;
    }

    @Override
    public Field<Byte> field5() {
        return XbtManifest.XBT_MANIFEST.CONFLICT;
    }

    @Override
    public Field<ULong> field6() {
        return XbtManifest.XBT_MANIFEST.REVISION_ID;
    }

    @Override
    public Field<ULong> field7() {
        return XbtManifest.XBT_MANIFEST.PREV_XBT_MANIFEST_ID;
    }

    @Override
    public Field<ULong> field8() {
        return XbtManifest.XBT_MANIFEST.NEXT_XBT_MANIFEST_ID;
    }

    @Override
    public ULong component1() {
        return getXbtManifestId();
    }

    @Override
    public ULong component2() {
        return getReleaseId();
    }

    @Override
    public ULong component3() {
        return getModuleId();
    }

    @Override
    public ULong component4() {
        return getXbtId();
    }

    @Override
    public Byte component5() {
        return getConflict();
    }

    @Override
    public ULong component6() {
        return getRevisionId();
    }

    @Override
    public ULong component7() {
        return getPrevXbtManifestId();
    }

    @Override
    public ULong component8() {
        return getNextXbtManifestId();
    }

    @Override
    public ULong value1() {
        return getXbtManifestId();
    }

    @Override
    public ULong value2() {
        return getReleaseId();
    }

    @Override
    public ULong value3() {
        return getModuleId();
    }

    @Override
    public ULong value4() {
        return getXbtId();
    }

    @Override
    public Byte value5() {
        return getConflict();
    }

    @Override
    public ULong value6() {
        return getRevisionId();
    }

    @Override
    public ULong value7() {
        return getPrevXbtManifestId();
    }

    @Override
    public ULong value8() {
        return getNextXbtManifestId();
    }

    @Override
    public XbtManifestRecord value1(ULong value) {
        setXbtManifestId(value);
        return this;
    }

    @Override
    public XbtManifestRecord value2(ULong value) {
        setReleaseId(value);
        return this;
    }

    @Override
    public XbtManifestRecord value3(ULong value) {
        setModuleId(value);
        return this;
    }

    @Override
    public XbtManifestRecord value4(ULong value) {
        setXbtId(value);
        return this;
    }

    @Override
    public XbtManifestRecord value5(Byte value) {
        setConflict(value);
        return this;
    }

    @Override
    public XbtManifestRecord value6(ULong value) {
        setRevisionId(value);
        return this;
    }

    @Override
    public XbtManifestRecord value7(ULong value) {
        setPrevXbtManifestId(value);
        return this;
    }

    @Override
    public XbtManifestRecord value8(ULong value) {
        setNextXbtManifestId(value);
        return this;
    }

    @Override
    public XbtManifestRecord values(ULong value1, ULong value2, ULong value3, ULong value4, Byte value5, ULong value6, ULong value7, ULong value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XbtManifestRecord
     */
    public XbtManifestRecord() {
        super(XbtManifest.XBT_MANIFEST);
    }

    /**
     * Create a detached, initialised XbtManifestRecord
     */
    public XbtManifestRecord(ULong xbtManifestId, ULong releaseId, ULong moduleId, ULong xbtId, Byte conflict, ULong revisionId, ULong prevXbtManifestId, ULong nextXbtManifestId) {
        super(XbtManifest.XBT_MANIFEST);

        set(0, xbtManifestId);
        set(1, releaseId);
        set(2, moduleId);
        set(3, xbtId);
        set(4, conflict);
        set(5, revisionId);
        set(6, prevXbtManifestId);
        set(7, nextXbtManifestId);
    }
}
