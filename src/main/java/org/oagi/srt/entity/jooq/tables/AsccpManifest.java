/*
 * This file is generated by jOOQ.
 */
package org.oagi.srt.entity.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.srt.entity.jooq.Keys;
import org.oagi.srt.entity.jooq.Oagi;
import org.oagi.srt.entity.jooq.tables.records.AsccpManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsccpManifest extends TableImpl<AsccpManifestRecord> {

    private static final long serialVersionUID = -670413317;

    /**
     * The reference instance of <code>oagi.asccp_manifest</code>
     */
    public static final AsccpManifest ASCCP_MANIFEST = new AsccpManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsccpManifestRecord> getRecordType() {
        return AsccpManifestRecord.class;
    }

    /**
     * The column <code>oagi.asccp_manifest.asccp_manifest_id</code>.
     */
    public final TableField<AsccpManifestRecord, ULong> ASCCP_MANIFEST_ID = createField(DSL.name("asccp_manifest_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.asccp_manifest.release_id</code>.
     */
    public final TableField<AsccpManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.asccp_manifest.module_id</code>.
     */
    public final TableField<AsccpManifestRecord, ULong> MODULE_ID = createField(DSL.name("module_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>oagi.asccp_manifest.asccp_id</code>.
     */
    public final TableField<AsccpManifestRecord, ULong> ASCCP_ID = createField(DSL.name("asccp_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.asccp_manifest.role_of_acc_manifest_id</code>.
     */
    public final TableField<AsccpManifestRecord, ULong> ROLE_OF_ACC_MANIFEST_ID = createField(DSL.name("role_of_acc_manifest_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>oagi.asccp_manifest</code> table reference
     */
    public AsccpManifest() {
        this(DSL.name("asccp_manifest"), null);
    }

    /**
     * Create an aliased <code>oagi.asccp_manifest</code> table reference
     */
    public AsccpManifest(String alias) {
        this(DSL.name(alias), ASCCP_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.asccp_manifest</code> table reference
     */
    public AsccpManifest(Name alias) {
        this(alias, ASCCP_MANIFEST);
    }

    private AsccpManifest(Name alias, Table<AsccpManifestRecord> aliased) {
        this(alias, aliased, null);
    }

    private AsccpManifest(Name alias, Table<AsccpManifestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AsccpManifest(Table<O> child, ForeignKey<O, AsccpManifestRecord> key) {
        super(child, key, ASCCP_MANIFEST);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public Identity<AsccpManifestRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ASCCP_MANIFEST;
    }

    @Override
    public UniqueKey<AsccpManifestRecord> getPrimaryKey() {
        return Keys.KEY_ASCCP_MANIFEST_PRIMARY;
    }

    @Override
    public List<UniqueKey<AsccpManifestRecord>> getKeys() {
        return Arrays.<UniqueKey<AsccpManifestRecord>>asList(Keys.KEY_ASCCP_MANIFEST_PRIMARY);
    }

    @Override
    public List<ForeignKey<AsccpManifestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AsccpManifestRecord, ?>>asList(Keys.ASCCP_MANIFEST_RELEASE_ID_FK, Keys.ASCCP_MANIFEST_MODULE_ID_FK, Keys.ASCCP_MANIFEST_ASCCP_ID_FK, Keys.ASCCP_MANIFEST_ROLE_OF_ACC_MANIFEST_ID_FK);
    }

    public Release release() {
        return new Release(this, Keys.ASCCP_MANIFEST_RELEASE_ID_FK);
    }

    public Module module() {
        return new Module(this, Keys.ASCCP_MANIFEST_MODULE_ID_FK);
    }

    public Asccp asccp() {
        return new Asccp(this, Keys.ASCCP_MANIFEST_ASCCP_ID_FK);
    }

    public AccManifest accManifest() {
        return new AccManifest(this, Keys.ASCCP_MANIFEST_ROLE_OF_ACC_MANIFEST_ID_FK);
    }

    @Override
    public AsccpManifest as(String alias) {
        return new AsccpManifest(DSL.name(alias), this);
    }

    @Override
    public AsccpManifest as(Name alias) {
        return new AsccpManifest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AsccpManifest rename(String name) {
        return new AsccpManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsccpManifest rename(Name name) {
        return new AsccpManifest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
