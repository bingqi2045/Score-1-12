/*
 * This file is generated by jOOQ.
 */
package org.oagi.srt.entity.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.srt.entity.jooq.Indexes;
import org.oagi.srt.entity.jooq.Keys;
import org.oagi.srt.entity.jooq.Oagi;
import org.oagi.srt.entity.jooq.tables.records.TextContentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TextContent extends TableImpl<TextContentRecord> {

    private static final long serialVersionUID = 553521956;

    /**
     * The reference instance of <code>oagi.text_content</code>
     */
    public static final TextContent TEXT_CONTENT = new TextContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TextContentRecord> getRecordType() {
        return TextContentRecord.class;
    }

    /**
     * The column <code>oagi.text_content.text_content_id</code>.
     */
    public final TableField<TextContentRecord, ULong> TEXT_CONTENT_ID = createField(DSL.name("text_content_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.text_content.text_content_type</code>.
     */
    public final TableField<TextContentRecord, String> TEXT_CONTENT_TYPE = createField(DSL.name("text_content_type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("json", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>oagi.text_content.text_content</code>.
     */
    public final TableField<TextContentRecord, String> TEXT_CONTENT_ = createField(DSL.name("text_content"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>oagi.text_content</code> table reference
     */
    public TextContent() {
        this(DSL.name("text_content"), null);
    }

    /**
     * Create an aliased <code>oagi.text_content</code> table reference
     */
    public TextContent(String alias) {
        this(DSL.name(alias), TEXT_CONTENT);
    }

    /**
     * Create an aliased <code>oagi.text_content</code> table reference
     */
    public TextContent(Name alias) {
        this(alias, TEXT_CONTENT);
    }

    private TextContent(Name alias, Table<TextContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TextContent(Name alias, Table<TextContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TextContent(Table<O> child, ForeignKey<O, TextContentRecord> key) {
        super(child, key, TEXT_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEXT_CONTENT_PRIMARY);
    }

    @Override
    public Identity<TextContentRecord, ULong> getIdentity() {
        return Keys.IDENTITY_TEXT_CONTENT;
    }

    @Override
    public UniqueKey<TextContentRecord> getPrimaryKey() {
        return Keys.KEY_TEXT_CONTENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TextContentRecord>> getKeys() {
        return Arrays.<UniqueKey<TextContentRecord>>asList(Keys.KEY_TEXT_CONTENT_PRIMARY);
    }

    @Override
    public TextContent as(String alias) {
        return new TextContent(DSL.name(alias), this);
    }

    @Override
    public TextContent as(Name alias) {
        return new TextContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TextContent rename(String name) {
        return new TextContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TextContent rename(Name name) {
        return new TextContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
