/*
 * This file is generated by jOOQ.
 */
package org.oagi.srt.entity.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.oagi.srt.entity.jooq.Indexes;
import org.oagi.srt.entity.jooq.Keys;
import org.oagi.srt.entity.jooq.Oagi;
import org.oagi.srt.entity.jooq.tables.records.RevisionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Revision extends TableImpl<RevisionRecord> {

    private static final long serialVersionUID = 1505502107;

    /**
     * The reference instance of <code>oagi.revision</code>
     */
    public static final Revision REVISION = new Revision();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RevisionRecord> getRecordType() {
        return RevisionRecord.class;
    }

    /**
     * The column <code>oagi.revision.revision_id</code>.
     */
    public final TableField<RevisionRecord, ULong> REVISION_ID = createField(DSL.name("revision_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.revision.revision_num</code>. This is an incremental integer. It tracks changes in each component. If a change is made to a component after it has been published, the component receives a new revision number. Revision number can be 1, 2, and so on.
     */
    public final TableField<RevisionRecord, UInteger> REVISION_NUM = createField(DSL.name("revision_num"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "This is an incremental integer. It tracks changes in each component. If a change is made to a component after it has been published, the component receives a new revision number. Revision number can be 1, 2, and so on.");

    /**
     * The column <code>oagi.revision.revision_tracking_num</code>. This supports the ability to undo changes during a revision (life cycle of a revision is from the component's WIP state to PUBLISHED state). REVISION_TRACKING_NUM can be 1, 2, and so on.
     */
    public final TableField<RevisionRecord, UInteger> REVISION_TRACKING_NUM = createField(DSL.name("revision_tracking_num"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "This supports the ability to undo changes during a revision (life cycle of a revision is from the component's WIP state to PUBLISHED state). REVISION_TRACKING_NUM can be 1, 2, and so on.");

    /**
     * The column <code>oagi.revision.revision_action</code>. This indicates the action associated with the record.
     */
    public final TableField<RevisionRecord, String> REVISION_ACTION = createField(DSL.name("revision_action"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "This indicates the action associated with the record.");

    /**
     * The column <code>oagi.revision.reference</code>.
     */
    public final TableField<RevisionRecord, String> REFERENCE = createField(DSL.name("reference"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>oagi.revision.snapshot</code>.
     */
    public final TableField<RevisionRecord, JSON> SNAPSHOT = createField(DSL.name("snapshot"), org.jooq.impl.SQLDataType.JSON, this, "");

    /**
     * The column <code>oagi.revision.prev_revision_id</code>.
     */
    public final TableField<RevisionRecord, ULong> PREV_REVISION_ID = createField(DSL.name("prev_revision_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>oagi.revision.next_revision_id</code>.
     */
    public final TableField<RevisionRecord, ULong> NEXT_REVISION_ID = createField(DSL.name("next_revision_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>oagi.revision.created_by</code>.
     */
    public final TableField<RevisionRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.revision.creation_timestamp</code>.
     */
    public final TableField<RevisionRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>oagi.revision</code> table reference
     */
    public Revision() {
        this(DSL.name("revision"), null);
    }

    /**
     * Create an aliased <code>oagi.revision</code> table reference
     */
    public Revision(String alias) {
        this(DSL.name(alias), REVISION);
    }

    /**
     * Create an aliased <code>oagi.revision</code> table reference
     */
    public Revision(Name alias) {
        this(alias, REVISION);
    }

    private Revision(Name alias, Table<RevisionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Revision(Name alias, Table<RevisionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Revision(Table<O> child, ForeignKey<O, RevisionRecord> key) {
        super(child, key, REVISION);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REVISION_REFERENCE);
    }

    @Override
    public Identity<RevisionRecord, ULong> getIdentity() {
        return Keys.IDENTITY_REVISION;
    }

    @Override
    public UniqueKey<RevisionRecord> getPrimaryKey() {
        return Keys.KEY_REVISION_PRIMARY;
    }

    @Override
    public List<UniqueKey<RevisionRecord>> getKeys() {
        return Arrays.<UniqueKey<RevisionRecord>>asList(Keys.KEY_REVISION_PRIMARY);
    }

    @Override
    public List<ForeignKey<RevisionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RevisionRecord, ?>>asList(Keys.REVISION_PREV_REVISION_ID_FK, Keys.REVISION_NEXT_REVISION_ID_FK, Keys.REVISION_CREATED_BY_FK);
    }

    public Revision revisionPrevRevisionIdFk() {
        return new Revision(this, Keys.REVISION_PREV_REVISION_ID_FK);
    }

    public Revision revisionNextRevisionIdFk() {
        return new Revision(this, Keys.REVISION_NEXT_REVISION_ID_FK);
    }

    public AppUser appUser() {
        return new AppUser(this, Keys.REVISION_CREATED_BY_FK);
    }

    @Override
    public Revision as(String alias) {
        return new Revision(DSL.name(alias), this);
    }

    @Override
    public Revision as(Name alias) {
        return new Revision(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Revision rename(String name) {
        return new Revision(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Revision rename(Name name) {
        return new Revision(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, UInteger, UInteger, String, String, JSON, ULong, ULong, ULong, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
